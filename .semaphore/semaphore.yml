version: v1.0
name: Initial Pipeline
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu2004
blocks:
  - name: 'Block #1'
    dependencies: []
    task:
      prologue:
        commands:
          # Get the latest version of our source code from GitHub:
          - checkout

# TOOD: why don't nix commands work as root

      jobs:
        - name: 'Job #1'
          commands:
          - export FLAKEHUB_PUSH_REPOSITORY="$(echo "${SEMAPHORE_ORGANIZATION_URL}" | cut -d "." -f1 | cut -d '/' -f3)/${SEMAPHORE_PROJECT_NAME}"
          - export FLAKEHUB_PUSH_BINARY_URL="https://install.determinate.systems/flakehub-push/branch/main/X64-Linux?ci=semaphore"
          - export FH_CLOSURE_URL="https://install.determinate.systems/fh/branch/main/X64-Linux?ci=semaphore"
          - export MAGIC_NIX_CACHE_CLOSURE_URL="https://install.determinate.systems/magic-nix-cache-closure/branch/main/X64-Linux?ci=semaphore"

          # debug only:
          # - export FLAKEHUB_API_ADDR="https://api.cluster-activate-exited.ngrok-free.app/"
          # - export FLAKEHUB_FRONTEND_ADDR="https://web.cluster-activate-exited.ngrok-free.app/"
          # - export FLAKEHUB_CACHE_ADDR="https://cache.cluster-activate-exited.ngrok-free.app/"
          # - export FLAKEHUB_PUSH_HOST="${FLAKEHUB_API_ADDR}"
          - export FLAKEHUB_PUSH_REPOSITORY="DeterminateSystems/test-from-semaphore"
          - export FLAKEHUB_PUSH_ROLLING_MINOR="$(date '+%s')"
          # debug only:
          - export FLAKEHUB_PUSH_BINARY_URL="https://install.determinate.systems/flakehub-push/pr/222/X64-Linux?ci=semaphore"

          # install determinate nix
          - curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install linux --determinate --no-confirm --init systemd
          - . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh

          # TODO: when cache access works in prod, this can probably just fetch from fh:
          
          # acquire `flakehub-push`:
          - curl -L "${FLAKEHUB_PUSH_BINARY_URL}" | sudo tee /usr/bin/flakehub-push &>/dev/null
          - sudo chmod +x /usr/bin/flakehub-push
          # acquire `magic-nix-cache`:
          - export MNC_CLSR="$(curl -L "${MAGIC_NIX_CACHE_CLOSURE_URL}" | xz -d | sudo "$(which nix-store)" --import | tail -n1 | head -n1)"
          - sudo ln -sf "${MNC_CLSR}/bin/magic-nix-cache" /usr/bin/magic-nix-cache
          # acquire `fh`:
          - export FH_CLSR="$(curl -L "${FH_CLOSURE_URL}" | xz -d | sudo "$(which nix-store)" --import | tail -n1 | head -n1)"
          - sudo ln -sf "${FH_CLSR}/bin/fh" /usr/bin/fh

          # debug only:
          # - sudo systemctl set-environment FLAKEHUB_API_ADDR="${FLAKEHUB_API_ADDR}"
          # - sudo systemctl set-environment FLAKEHUB_FRONTEND_ADDR="${FLAKEHUB_FRONTEND_ADDR}"
          # - sudo systemctl set-environment FLAKEHUB_CACHE_ADDR="${FLAKEHUB_CACHE_ADDR}"
          # - sudo systemctl daemon-reload
          # - sudo systemctl restart nix-daemon

          # login with `determinate-nixd login` (used by magic-nix-cache, substitutions)
          - echo "${SEMAPHORE_OIDC_TOKEN}" | determinate-nixd login token --token-file /dev/stdin

          # stage login credentials for flakehub-push
          - export FLAKEHUB_PUSH_OIDC_TOKEN="${SEMAPHORE_OIDC_TOKEN}"

          # test publishing a rolling release
          # - note, now it uses FLAKEHUB_PUSH_ROLLING_MINOR which is unix timestamp each run
          - flakehub-push --rolling --visibility private --include-output-paths

          # test magic-nix-cache
          - |
            magic-nix-cache \
              --flakehub-api-server="${FLAKEHUB_API_ADDR}" \
              --flakehub-cache-server="${FLAKEHUB_CACHE_ADDR}" \
              --flakehub-flake-name="${FLAKEHUB_PUSH_REPOSITORY}"
          - nix build '.#packages.x86_64-linux.default'
          
          - sleep 10 # wait on mnc, I guess

          # delete path 
          - export RESULT="$(readlink -f ./result)"
          - export RESULT_RAND_EXPECTED="$(cat ./result)"
          - echo "RESULT=${RESULT}"
          - echo "RESULT_RAND_EXPECTED=${RESULT_RAND_EXPECTED}"
          - rm ./result*
          - sudo "$(which nix)" store delete "${RESULT}" --ignore-liveness

          # TODO: revisit when login is fixed, install 'fh' into profile from cache, then do this
          #- export RESOLVED_OUT="$(fh resolve "github:colemickens/test/0.${FLAKEHUB_PUSH_ROLLING_MINOR}#packages.x86_64-linux.default")"
          - |
            sudo nix copy \
              --from "${FLAKEHUB_CACHE_ADDR}" \
              -j0 \
              --no-check-sigs \
              --option narinfo-cache-negative-ttl 0 \
                "${RESULT}"
          - export RESULT_RAND_ACTUAL="$(cat "${RESULT}")"
          - echo "RESULT_RAND_ACTUAL=${RESULT_RAND_ACTUAL}"
          - echo "RESULT_RAND_EXPECTED=${RESULT_RAND_EXPECTED}"
